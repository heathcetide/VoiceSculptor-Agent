(function () {const SERVER_BASE = "{{.BaseURL}}"; let sessionId = null; let eventSource = null; function loadAxios(callback) { if (window.axios) { callback(); return; } const script = document.createElement("script"); script.src = "https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"; script.onload = callback; document.head.appendChild(script); } function loadTailwind(callback) { if (document.getElementById("__tailwindcss")) { callback(); return; } const link = document.createElement("link"); link.id = "__tailwindcss"; link.rel = "stylesheet"; link.href = "https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"; link.onload = callback; document.head.appendChild(link); } function main() { const config = window.__AIPetConfig || {}; function createUI() { const petBtn = document.createElement("button"); petBtn.innerHTML = `<span class="inline-block animate-spin-slow"> <svg width="36" height="36" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg"> <circle cx="24" cy="24" r="22" stroke="#60a5fa" stroke-width="4" opacity="0.3"/> <circle cx="24" cy="24" r="16" stroke="#3b82f6" stroke-width="4" stroke-dasharray="50 50"/> <ellipse cx="24" cy="24" rx="10" ry="14" fill="#f1f5f9"/><ellipse cx="24" cy="20" rx="8" ry="7" fill="#3b82f6"/><ellipse cx="20" cy="18" rx="1.5" ry="2" fill="#fff"/><ellipse cx="28" cy="18" rx="1.5" ry="2" fill="#fff"/><rect x="20" y="25" width="8" height="3" rx="1.5" fill="#2563eb"/></svg></span>`; petBtn.className = "fixed bottom-8 right-8 z-[9999] shadow-2xl rounded-full bg-gradient-to-br from-blue-400 to-blue-600 hover:from-blue-500 hover:to-blue-700 border-2 border-white focus:outline-none focus:ring-2 focus:ring-blue-200 transition-all duration-300 w-14 h-14 flex items-center justify-center group cursor-move"; petBtn.style.animation = "warpMove 4s infinite alternate"; petBtn.classList.add("animate__animated", "animate__fadeIn", "animate__delay-1s"); const savedPosition = JSON.parse(localStorage.getItem("petBtnPosition")); if (savedPosition) { petBtn.style.left = savedPosition.left + 'px'; petBtn.style.top = savedPosition.top + 'px';} else { petBtn.style.left = 'auto'; petBtn.style.top = 'auto'; petBtn.style.bottom = '8px'; petBtn.style.right = '8px'; } let isDragging = false, dragOffsetX = 0, dragOffsetY = 0; petBtn.addEventListener('mousedown', function (e) { isDragging = true; dragOffsetX = e.clientX - petBtn.getBoundingClientRect().left; dragOffsetY = e.clientY - petBtn.getBoundingClientRect().top; document.body.style.userSelect = 'none'; }); document.addEventListener('mousemove', function (e) { if (!isDragging) return; petBtn.style.transition = 'none'; let x = e.clientX - dragOffsetX; let y = e.clientY - dragOffsetY; x = Math.max(0, Math.min(window.innerWidth - petBtn.offsetWidth, x)); y = Math.max(0, Math.min(window.innerHeight - petBtn.offsetHeight, y)); petBtn.style.left = x + 'px'; petBtn.style.top = y + 'px'; petBtn.style.right = 'auto'; petBtn.style.bottom = 'auto'; petBtn.style.position = 'fixed'; localStorage.setItem("petBtnPosition", JSON.stringify({left: x, top: y})); }); document.addEventListener('mouseup', function () { isDragging = false; petBtn.style.transition = ''; document.body.style.userSelect = ''; }); const panel = document.createElement("div"); panel.className = "fixed bottom-32 right-8 w-96 max-w-[96vw] max-h-[80vh] p-0 bg-white/10 backdrop-blur-2xl shadow-2xl rounded-2xl z-[9999] flex flex-col border-2 border-blue-400/60 transition-all duration-300 neon-border"; panel.style.display = "none"; panel.style.transition = "transform 0.3s ease-in-out, opacity 0.3s ease-in-out"; const panelNeon = document.createElement('style'); panelNeon.innerText = `.neon-border {box-shadow: 0 0 24px 2px #60a5fa99, 0 0 0 2px #3b82f6cc inset;} .neon-border:after { content: ''; position: absolute; inset: 0; border-radius: 1rem; pointer-events: none; box-shadow: 0 0 40px 8px #3b82f6cc; opacity: 0.3;}`;document.head.appendChild(panelNeon);const panelTitle = document.createElement("div"); panelTitle.className = "text-white text-3xl font-bold p-2 border-b border-blue-400/30 bg-gradient-to-r from-blue-600 to-indigo-500 shadow-lg rounded-t-lg text-center relative"; panelTitle.innerHTML = `<span class="text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-indigo-600 animate-pulse text-2xl">{{.Name}}</span><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24" class="absolute top-1/2 right-4 transform -translate-y-1/2 text-white opacity-80"><path fill="currentColor" d="M9 16l-4-4 4-4 1.5 1.5-2.5 2.5h8l-2.5-2.5 1.5-1.5 4 4-4 4-1.5-1.5 2.5-2.5H9z"/></svg>`; const output = document.createElement("div"); output.className = "flex-1 overflow-y-auto text-black px-6 pt-6 pb-2 font-mono text-[15px] leading-relaxed space-y-2 bg-gradient-to-b from-blue-900/80 to-blue-700/60 rounded-t-2xl border-b border-blue-400/30 shadow-inner"; output.style.maxHeight = "calc(80vh - 64px)"; output.style.overflowY = "auto"; const scrollbarStyle = document.createElement('style'); scrollbarStyle.innerText = `.flex-1::-webkit-scrollbar-track { background: linear-gradient(to bottom, #a7c7f1, #d6c8f1); }.flex-1::-webkit-scrollbar-thumb { background: linear-gradient(to bottom, #a7c7f1, #d6c8f1); border-radius: 10px; border: 2px solid #fff;} .flex-1::-webkit-scrollbar { width: 10px; }`;document.head.appendChild(scrollbarStyle); const actionBtn = document.createElement("button"); actionBtn.innerText = "ÂºÄÂßãÂØπËØù"; actionBtn.className = "w-32 mx-auto my-4 py-2 rounded-xl bg-gradient-to-r from-blue-500 to-cyan-400 hover:from-blue-600 hover:to-cyan-500 text-white font-bold shadow-lg transition-all duration-200 text-base tracking-widest border-0 outline-none focus:ring-2 focus:ring-cyan-300"; let isChatting = false; actionBtn.onclick = () => { if (!isChatting) { isChatting = true; actionBtn.innerText = "ÂÅúÊ≠¢"; actionBtn.classList.add("bg-gradient-to-r", "from-red-500", "to-pink-400"); actionBtn.classList.remove("from-blue-500", "to-cyan-400"); startChat(output).finally(() => { isChatting = false; actionBtn.innerText = "ÂºÄÂßãÂØπËØù"; actionBtn.classList.remove("bg-gradient-to-r", "from-red-500", "to-pink-400"); actionBtn.classList.add("from-blue-500", "to-cyan-400"); }); } else { stopChat(output); isChatting = false; actionBtn.innerText = "ÂºÄÂßãÂØπËØù"; actionBtn.classList.remove("bg-gradient-to-r", "from-red-500", "to-pink-400"); actionBtn.classList.add("from-blue-500", "to-cyan-400"); } }; panel.appendChild(panelTitle); panel.appendChild(output); panel.appendChild(actionBtn); document.body.appendChild(panel); petBtn.onclick = (e) => { if (isDragging) return; const isVisible = panel.style.display === "flex"; if (isVisible) { panel.style.opacity = "0"; panel.style.transform = "scale(0)"; setTimeout(() => { panel.style.display = "none";}, 300); } else { panel.style.display = "flex"; panel.style.opacity = "1"; panel.style.transform = "scale(1)"; }}; document.body.appendChild(petBtn); } function startChat(outputEl) {const {apiKey, apiSecret, assistantId = 1} = config;const headers = {"X-API-KEY": apiKey, "X-API-SECRET": apiSecret, "Accept": "application/json, text/plain, */*", "Content-Type": "application/json", "Accept-Language": "zh-CN,zh;q=0.9",};const body = { apiKey, apiSecret, assistantId, systemPrompt: config.systemPrompt || "‰Ω†ÊòØ‰∏Ä‰∏™Ë¥¥ÂøÉÁöÑËØ≠Èü≥Âä©Êâã", temperature: config.temperature ?? 0.7, maxTokens: config.maxTokens ?? 512, speaker: config.speaker || "default", language: config.language || "zh-CN", speed: config.speed ?? 1.0, volume: config.volume ?? 5, personaTag: config.personaTag || "friendly", }; axios.post(`${SERVER_BASE}/chat/start`, body, { headers, withCredentials: true, }) .then((res) => { if (res.data && res.data.data && res.data.data.sessionId) { sessionId = res.data.data.sessionId; outputEl.innerHTML += `<div style="color:green;">üü¢ ‰ºöËØùÂºÄÂßã</div>`; listenSSE(sessionId, outputEl, apiKey, apiSecret); } else { outputEl.innerHTML += `<div style="color:red;">‚ùå ÂêØÂä®Â§±Ë¥•: ${res.data.message}</div>`; } }) .catch((err) => { outputEl.innerHTML += `<div style="color:red;">‚ùå ËØ∑Ê±ÇÂ§±Ë¥•: ${err.message}</div>`; }); } function listenSSE(sessionId, outputEl, apiKey, apiSecret) { eventSource = new EventSource(`${SERVER_BASE}/chat/stream?sessionId=${sessionId}&apiKey=${apiKey}&apiSecret=${apiSecret}`); eventSource.onmessage = (e) => { outputEl.innerHTML += `<div>ü§ñ ${e.data}</div>`; outputEl.scrollTop = outputEl.scrollHeight; }; eventSource.onerror = () => { outputEl.innerHTML += `<div style="color:red;">‚ö†Ô∏è SSEËøûÊé•Â∑≤Êñ≠ÂºÄ</div>`; eventSource.close();};} function stopChat(outputEl) { if (!sessionId) return; const {apiKey, apiSecret} = config; const headers = {"X-API-KEY": apiKey, "X-API-SECRET": apiSecret, "Accept": "application/json, text/plain, */*", "Content-Type": "application/json", "Accept-Language": "zh-CN,zh;q=0.9",}; axios.post(`${SERVER_BASE}/chat/stop?sessionId=${sessionId}`, {}, {headers, withCredentials: true, }) .then((res) => { outputEl.innerHTML += `<div style="color:#666;">üî¥ ${res.data.data?.message || "Â∑≤ÂÅúÊ≠¢"}</div>`; if (eventSource) eventSource.close(); sessionId = null; }) .catch(() => { outputEl.innerHTML += `<div style="color:red;">‚ùå ÂÅúÊ≠¢Â§±Ë¥•</div>`; }); } createUI(); } window.addEventListener("DOMContentLoaded", () => { loadTailwind(() => loadAxios(main)); }); })();
